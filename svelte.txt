1. Calculator app

- framework that compile the code before we ship it
- small in size, fast, simple, less code
- VSCode extensions: Svelte, Svelte Intellisense, Svelte 3 Snippets
- Fontawesome inject in public folder
- ES6 import and export
- CSS scoped locally, not like in React
- CSS variables -> var(--primaryColor) !!! Thing to improve to Shivani Center project !!!
- :global(span) -> add css global
- #each in Svelte, map() in React
- for Accesibility for fontawesome use aria-label or aria-name -> screen readers
- props, dispatch event, setContext & getContext, store, fail
- props drilling -> pass props deep to nested components
- filter() returns a new array
- Svelte update:  () => removeSomething(id)  can be used like removeSomething(id)
- setContext & getContext (video 27)
			   -> easily pass data for parent component to child component
			   -> better that props drilling, because we can omit the middle components passing
			   -> similar with Context API of React
			   -> if we pass more data, we can set a state object with setContext
- createEventDispatcher -> pass data from child components to parent components
			-> not the prefered method, better use Store or setContext-getContext
- Reactivity -> $:variable -> don't neet to add let
- reduce()
- Two Way binding ->  great in Svelte
- dynamic class -> class:formControl={} in Svelte
				-> ternary operator in React
- Lifecycle functions : onMount, beforeUpdate, afterUpdate, onDestroy, tick
- Local Storage API -> browser API !!!! -> after refresh the data is there
- slots -> modal
- <slot></slot> -> svelte or props.children in React
- named slots
- transition & animation built in Svelte
- transitions can be applied only on DOM elements, not on components
- animate the static ones -> animate
- an element that use the animate directive must be the immeditate child of a keyed each block
!!!  The default behaviour oh each block: Svelte add or removes last item, and then updates the rest !!!!!
!!!! Solution -> key: { #each expenses as expense, index (expense.id)}  !!!!

1. HTTP requests using onMount()  -> fetch or axios  !!!!!
EX:
	let users = [];
	loading=true;
 -> onMount(async () => {
	 let response = await fetch('url);
	 let userData = await response.json();
	 users = userdata;
	 loading = false;
 })
2. HTTP requests using #Await !!!!!!
{#await} {:then} {:catch} {/await}


!!!!!!!!!!!!          Deploy -> Netlify         !!!!!

- Create account on Netlify

1. Drag & drop
- npm run build 
- drag & drop public/ folder

2. Netlify Continous deployment process
 -> Set up our project to the Github
 -> Netlify watches for changes and each time changes are applied, Netlify rebuilds the site for us
 -> So we just push the changes to Github and Netlify will do the rest

 - New site from Git -> Github -> select repository    -> build command: npm run build  -> Deploy site
													   -> publish directory: public